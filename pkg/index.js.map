{
  "version": 3,
  "sources": ["../index.js"],
  "sourcesContent": ["// shortcuts for easier to read formulas\n\nconst TAU = Math.PI * 2;\nconst rad = Math.PI / 180;\n\n// sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas\n// date/time constants and conversions\n\nconst dayMs = 1000 * 60 * 60 * 24;\nconst J1970 = 2440588;\nconst J2000 = 2451545;\n\nfunction toJulian (date) {\n  return (date.valueOf() / dayMs) - 0.5 + J1970;\n}\n\nfunction fromJulian (j) {\n  return new Date((j + 0.5 - J1970) * dayMs);\n}\n\nfunction toDays (date) {\n  return toJulian(date) - J2000;\n}\n\n// General calculations for position.\n\nconst e = rad * 23.4397; // Obliquity of the Earth.\n\nfunction rightAscension (l, b) {\n  const { sin, cos, tan, atan2 } = Math;\n\n  return atan2(sin(l) * cos(e) - tan(b) * sin(e), cos(l));\n}\nfunction declination (l, b) {\n  const { asin, sin, cos } = Math;\n\n  return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l));\n}\n\nfunction azimuth (H, phi, dec) {\n  const { atan2, sin, cos, tan } = Math;\n\n  return atan2(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi));\n}\nfunction altitude (H, phi, dec) {\n  const { asin, sin, cos } = Math;\n\n  return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H));\n}\n\nfunction siderealTime (d, lw) {\n  return rad * (280.16 + 360.9856235 * d) - lw;\n}\n\nfunction astroRefraction (h) {\n  const { tan } = Math;\n  // the following formula works for positive altitudes only.\n\n  if (h < 0) {\n    h = 0;\n  } // if h = -0.08901179 a div/0 would occur.\n\n  // formula 16.4 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n  // 1.02 / tan(h + 10.26 / (h + 5.10)) h in degrees, result in arc minutes -> converted to rad:\n  return 0.0002967 / tan(h + 0.00312536 / (h + 0.08901179));\n}\n\n// general sun calculations\n\nfunction solarMeanAnomaly (d) {\n  return rad * (357.5291 + 0.98560028 * d);\n}\n\nfunction eclipticLongitude (M) {\n  const { sin, PI } = Math;\n\n  const C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)); // equation of center\n  const P = rad * 102.9372; // perihelion of the Earth\n\n  return M + C + P + PI;\n}\n\nfunction sunCoords (d) {\n  const M = solarMeanAnomaly(d);\n  const L = eclipticLongitude(M);\n\n  return {\n    dec: declination(L, 0),\n    ra: rightAscension(L, 0)\n  };\n}\n\n// calculates sun position for a given date and latitude/longitude\n\n/**\n *\n * @param {Date} date\n * @param {number} lat\n * @param {number} lng\n */\nexport function getPosition (date, lat, lng) {\n  var lw = rad * -lng\n    , phi = rad * lat\n    , d = toDays(date)\n\n    , c = sunCoords(d)\n    , H = siderealTime(d, lw) - c.ra;\n\n  return {\n    azimuth: azimuth(H, phi, c.dec),\n    altitude: altitude(H, phi, c.dec)\n  };\n}\n\n// sun times configuration (angle, morning name, evening name)\n\n/** @typedef SunTime\n * @prop {string} riseName\n * @prop {string} setName\n * @prop {number} angle\n */\n\n/* @type {Array<SunTime>} */\nexport const times = [\n  { angle: -0.833, riseName: 'sunrise', setName: 'sunset' },\n  { angle: -0.3, riseName: 'sunriseEnd', setName: 'sunsetStart' },\n  { angle: -6, riseName: 'dawn', setName: 'dusk' },\n  { angle: -12, riseName: 'nauticalDawn', setName: 'nauticalDusk' },\n  { angle: -18, riseName: 'nightEnd', setName: 'night' },\n  { angle: 6, riseName: 'goldenHourEnd', setName: 'goldenHour' }\n];\n\n// adds a custom time to the times config\n/**\n *\n * @param {number} angle\n * @param {string} riseName\n * @param {string} setName\n */\nexport function addTime (angle, riseName, setName) {\n  times.push({ angle, riseName, setName });\n}\n\n// calculations for sun times\n\nconst J0 = 0.0009;\n\nfunction julianCycle (d, lw) {\n  const { round } = Math;\n\n  return round(d - J0 - (lw / TAU));\n}\n\nfunction approxTransit (Ht, lw, n) {\n  return J0 + (Ht + lw) / TAU + n;\n}\n\nfunction solarTransitJ (ds, M, L) {\n  const { sin } = Math;\n\n  return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L);\n}\n\nfunction hourAngle (h, phi, d) {\n  const { sin, cos, acos } = Math;\n\n  return acos((sin(h) - sin(phi) * sin(d)) / (cos(phi) * cos(d)));\n}\n\nfunction observerAngle (height) {\n  return -2.076 * Math.sqrt(height) / 60;\n}\n\n// returns set time for the given sun altitude\nfunction getSetJ (h, lw, phi, dec, n, M, L) {\n  var w = hourAngle(h, phi, dec)\n    , a = approxTransit(w, lw, n);\n\n  return solarTransitJ(a, M, L);\n}\n\n// calculates sun times for a given date, latitude/longitude, and, optionally,\n// the observer height (in meters) relative to the horizon\n\nexport function getTimes (date, lat, lng, height) {\n  height = height || 0;\n\n  const lw = rad * -lng;\n  const phi = rad * lat;\n\n  const dh = observerAngle(height);\n  const d = toDays(date);\n  const n = julianCycle(d, lw);\n  const ds = approxTransit(0, lw, n);\n  const M = solarMeanAnomaly(ds);\n  const L = eclipticLongitude(M);\n  const dec = declination(L, 0);\n  const Jnoon = solarTransitJ(ds, M, L);\n\n  let time;\n  let h0;\n  let Jset;\n  let Jrise;\n\n  const result = {\n    solarNoon: fromJulian(Jnoon),\n    nadir: fromJulian(Jnoon - 0.5)\n  };\n\n  for (let i = 0, len = times.length; i < len; i += 1) {\n    time = times[i];\n    h0 = (time.angle + dh) * rad;\n\n    Jset = getSetJ(h0, lw, phi, dec, n, M, L);\n    Jrise = Jnoon - (Jset - Jnoon);\n\n    result[time.riseName] = fromJulian(Jrise);\n    result[time.setName] = fromJulian(Jset);\n  }\n\n  return result;\n}\n\n// moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas\n\nfunction moonCoords (d) { // geocentric ecliptic coordinates of the moon\n  const { sin, cos } = Math;\n\n  var L = rad * (218.316 + 13.176396 * d) // ecliptic longitude\n    , M = rad * (134.963 + 13.064993 * d) // mean anomaly\n    , F = rad * (93.272 + 13.229350 * d) // mean distance\n\n    , l = L + rad * 6.289 * sin(M) // longitude\n    , b = rad * 5.128 * sin(F) // latitude\n    , dt = 385001 - 20905 * cos(M); // distance to the moon in km\n\n  return {\n    ra: rightAscension(l, b),\n    dec: declination(l, b),\n    dist: dt\n  };\n}\n\n/**\n *\n * @param {Date} date\n * @param {number} lat\n * @param {number} lng\n */\nexport function getMoonPosition (date, lat, lng) {\n  const { atan2, sin, tan, cos } = Math;\n\n  const lw = rad * -lng;\n  const phi = rad * lat;\n  const d = toDays(date);\n\n  const c = moonCoords(d);\n  const H = siderealTime(d, lw) - c.ra;\n  // formula 14.1 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n  const pa = atan2(sin(H), tan(phi) * cos(c.dec) - sin(c.dec) * cos(H));\n\n  let h = altitude(H, phi, c.dec);\n\n  h += astroRefraction(h); // altitude correction for refraction\n\n  return {\n    azimuth: azimuth(H, phi, c.dec),\n    altitude: h,\n    distance: c.dist,\n    parallacticAngle: pa\n  };\n}\n\n// calculations for illumination parameters of the moon,\n// based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and\n// Chapter 48 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n\nexport function getMoonIllumination (date) {\n  const { acos, sin, cos, atan2 } = Math;\n\n  var d = toDays(date || new Date())\n    , s = sunCoords(d)\n    , m = moonCoords(d)\n\n    , sdist = 149598000 // distance from Earth to Sun in km\n\n    , phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra))\n    , inc = atan2(sdist * sin(phi), m.dist - sdist * cos(phi))\n    , angle = atan2(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec) -\n                cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra));\n\n  return {\n    fraction: (1 + cos(inc)) / 2,\n    phase: 0.5 + 0.5 * inc * (angle < 0 ? -1 : 1) / Math.PI,\n    angle: angle\n  };\n}\n\nfunction hoursLater (date, h) {\n  return new Date(date.valueOf() + h * dayMs / 24);\n}\n\n// calculations for moon rise/set times are based on http://www.stargazing.net/kepler/moonrise.html article\n\nexport function getMoonTimes (date, lat, lng, inUTC) {\n  const { sqrt, abs } = Math;\n  const t = new Date(date);\n\n  if (inUTC) {\n    t.setUTCHours(0, 0, 0, 0);\n  } else {\n    t.setHours(0, 0, 0, 0);\n  }\n\n  const hc = 0.133 * rad;\n\n  let h0 = getMoonPosition(t, lat, lng).altitude - hc;\n  let h1;\n  let h2;\n  let rise;\n  let set;\n  let a;\n  let b;\n  let xe;\n  let ye;\n  let d;\n  let roots;\n  let x1;\n  let x2;\n  let dx;\n\n  // go in 2-hour chunks, each time seeing if a 3-point quadratic curve crosses zero (which means rise or set)\n  for (let i = 1; i <= 24; i += 2) {\n    h1 = getMoonPosition(hoursLater(t, i), lat, lng).altitude - hc;\n    h2 = getMoonPosition(hoursLater(t, i + 1), lat, lng).altitude - hc;\n\n    a = (h0 + h2) / 2 - h1;\n    b = (h2 - h0) / 2;\n    xe = -b / (2 * a);\n    ye = (a * xe + b) * xe + h1;\n    d = b * b - 4 * a * h1;\n    roots = 0;\n\n    if (d >= 0) {\n      dx = sqrt(d) / (abs(a) * 2);\n      x1 = xe - dx;\n      x2 = xe + dx;\n      if (abs(x1) <= 1) {\n        roots++;\n      }\n      if (abs(x2) <= 1) {\n        roots++;\n      }\n      if (x1 < -1) {\n        x1 = x2;\n      }\n    }\n\n    if (roots === 1) {\n      if (h0 < 0) {\n        rise = i + x1;\n      } else {\n        set = i + x1;\n      }\n    } else if (roots === 2) {\n      rise = i + (ye < 0 ? x2 : x1);\n      set = i + (ye < 0 ? x1 : x2);\n    }\n\n    if (rise && set) {\n      break;\n    }\n\n    h0 = h2;\n  }\n\n  const result = {};\n\n  if (rise) {\n    result.rise = hoursLater(t, rise);\n  }\n  if (set) {\n    result.set = hoursLater(t, set);\n  }\n\n  if (!rise && !set) {\n    result[ye > 0 ? 'alwaysUp' : 'alwaysDown'] = true;\n  }\n\n  return result;\n}\n"],
  "mappings": "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",
  "names": []
}
